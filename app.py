import streamlit as st
import pandas as pd
import plotly.express as px

# Configura√ß√µes iniciais
st.set_page_config(page_title="Painel de Vagas de Dados", layout="wide")

# T√≠tulo do App
st.title("üìä Painel de Vagas de Dados")

# Carrega os dados
df_original = pd.read_csv("vagas_glassdoor_tratado.csv")  # dados completos
df = df_original.copy()  # ser√° filtrado conforme sele√ß√µes

# FILTROS LATERAIS
st.sidebar.header("üîé Filtros")

# Remoto
remoto = st.sidebar.checkbox("Mostrar apenas vagas remotas")
if remoto:
    df = df[df['remoto'] == 1]

# Estado
estados_disponiveis = sorted(df['estado'].dropna().unique())
estado_selecionado = st.sidebar.multiselect("Estado", estados_disponiveis)
if estado_selecionado:
    df = df[df['estado'].isin(estado_selecionado)]

# Regi√£o
regioes_disponiveis = sorted(df['regiao'].dropna().unique())
regiao_selecionada = st.sidebar.multiselect("Regi√£o", regioes_disponiveis)
if regiao_selecionada:
    df = df[df['regiao'].isin(regiao_selecionada)]

# Faixa salarial
faixas_salarial = sorted(df['faixa_salarial'].dropna().unique())
faixa_salario = st.sidebar.multiselect("Faixa salarial", faixas_salarial)
if faixa_salario:
    df = df[df['faixa_salarial'].isin(faixa_salario)]

# Faixa de publica√ß√£o
faixa_publicacao = sorted(df['faixa_dias'].dropna().unique())
publicacao_selecionada = st.sidebar.multiselect("Publicado h√° (dias)", faixa_publicacao)
if publicacao_selecionada:
    df = df[df['faixa_dias'].isin(publicacao_selecionada)]

# MOSTRA RESULTADOS
st.markdown(f"### üìå Total de vagas encontradas: {df.shape[0]}")
st.dataframe(df)

# GR√ÅFICO 1 ‚Äì Vagas por Estado (vis√£o geral, independente dos filtros)
# ‚û§ Usamos o df_original aqui para manter todos os estados vis√≠veis
estado_contagem = df_original['estado'].value_counts().reset_index()
estado_contagem.columns = ['estado', 'quantidade']

fig1 = px.bar(estado_contagem,
              x='estado', y='quantidade',
              title="Distribui√ß√£o de Vagas por Estado (Vis√£o Geral)",
              labels={'quantidade': 'N√∫mero de Vagas', 'estado': 'Estado'})

st.plotly_chart(fig1, use_container_width=True)

# GR√ÅFICO 2 ‚Äì Vagas por Regi√£o (filtrado)
fig2 = px.pie(df, names="regiao", title="Distribui√ß√£o por Regi√£o")
st.plotly_chart(fig2, use_container_width=True)

# GR√ÅFICO 3 ‚Äì Faixa Salarial (filtrado)
salario_contagem = df['faixa_salarial'].value_counts().reset_index()
salario_contagem.columns = ['faixa_salarial', 'count']

fig3 = px.bar(salario_contagem,
              x='faixa_salarial', y='count',
              title='Distribui√ß√£o por Faixa Salarial')
st.plotly_chart(fig3, use_container_width=True)

# BOT√ÉO PARA DOWNLOAD
st.markdown("### üì• Download dos dados filtrados")
st.download_button(
    label="Baixar como CSV",
    data=df.to_csv(index=False, encoding='utf-8-sig'),
    file_name='vagas_filtradas.csv',
    mime='text/csv'
)
